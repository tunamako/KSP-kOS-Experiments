//------\\
//---SETIrebalance-BalanceMod---\\
//------\\
//---Part Modding for TAC life support---\\
//------\\

//------\\
//---Air Filter---\\
//------\\

//TACLS Air Filter
@PART[TacAirFilter]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@mass = 0.32
}


//------\\
//---Carbon Extractors---\\
//------\\

//TACLS Carbon Extractor
@PART[TacCarbonExtractor]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 2400
	
	@description = A life support recycling module that extracts carbon from carbon dioxide, leaving pure breathable oxygen. It works by using the Bosch reaction. Rated for up to 3 kerbals and stretches breathing air reserves by a factor of about 7.6, since kerbals produce not enough carbon-dioxide to let the converter run at 100% capacity. With 3 kerbals, it uses about 374 ec per hour and produces about 16.08 oxygen.
	
	@mass = 0.48
	
	@MODULE[TacGenericConverter]
	{
		@conversionRate = 3.06
	}
	
	@RESOURCE[CarbonDioxide]
	{
		amount = 0
		maxAmount = 226
	}
}

//TACLS Carbon Extractor, Large
@PART[TacCarbonExtractorLarge]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 7200
	
	@description = A life support recycling module that extracts carbon from carbon dioxide, leaving pure breathable oxygen. It works by using the Bosch reaction. Packaged in a larger structure for easier use with massive rockets and space stations, with the added advantage of a faster conversion rate. Rated for up to 9 kerbals and stretches breathing air reserves by a factor of about 7.6, since kerbals produce not enough carbon-dioxide to let the converter run at 100% capacity. With 9 kerbals, it uses about 1121 ec per hour and produces about 48.24 oxygen.
	
	@mass = 1.44
}


//------\\
//---Sabatier Recyclers/Reactors---\\
//------\\

//TACLS Sabatier Recycler
@PART[TacSabatierRecycler]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 2700
	
	@title = TACLS Sabatier Reactor
	@description = The Sabatier Reactor turns about 6265 carbon dioxide and 24720 hydrogen into 10L of water and a negligible amount of methane (liquid fuel). It can transform the carbon dioxide of 3 kerbals, if enough hydrogen is available. With 3 carbon dioxide producing kerbals, it uses about 63.08 hydrogen and 430 EC per hour, producing about 25.52 mL of water.
	
	@mass = 0.48
	
	!MODULE[TacGenericConverter] {}
	MODULE
	{
		name = TacGenericConverter
		converterName = Sabatier Reactor

		// A scaling factor by which the resource amounts are multiplied
		conversionRate = 3.03

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources =  CarbonDioxide, 0.00148012889876, Hydrogen, 0.005840290184004, ElectricCharge, 0.039783051310155

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		// Liquid fuel output should be Methane with mass of 1.0500841750839127272727272727273e-9
		outputResources = Water, 0.000002362689394, false, LiquidFuel, 0.000000210016835, true
	}
	
	%RESOURCE[CarbonDioxide]
	{
		amount = 0
		maxAmount = 226
	}
	
	%RESOURCE[Hydrogen]
	{
		amount = 0
		maxAmount = 904
	}
}

//TACLS Sabatier Recycler, Large
@PART[TacSabatierRecyclerLarge]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 8100
	
	@title = TACLS Sabatier Reactor, Large
	@description = The Sabatier Reactor turns about 6265 carbon dioxide and 24720 hydrogen into 10L of water and a negligible amount of methane (liquid fuel). It can transform the carbon dioxide of 9 Kerbals, if enough hydrogen is available. With 9 carbon dioxide producing kerbals, it uses about 189.23 hydrogen and 1289 EC per hour, producing about 76.55 mL of water.
	
	@mass = 1.44
	
	!MODULE[TacGenericConverter] {}
	MODULE
	{
		name = TacGenericConverter
		converterName = Sabatier Reactor

		// A scaling factor by which the resource amounts are multiplied
		conversionRate = 9.09

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources =  CarbonDioxide, 0.00148012889876, Hydrogen, 0.005840290184004, ElectricCharge, 0.039783051310155

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		// Liquid fuel output should be Methane with mass of 1.0500841750839127272727272727273e-9
		outputResources = Water, 0.000002362689394, false, LiquidFuel, 0.000000210016835, true
	}
	
	%RESOURCE[CarbonDioxide]
	{
		amount = 0
		maxAmount = 676
	}
	
	%RESOURCE[Hydrogen]
	{
		amount = 0
		maxAmount = 2704
	}
}


//------\\
//---Water Purifier---\\
//------\\

//TACLS Water Purifier
@PART[TacWaterPurifier]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 1800
	
	@description = A life support recycling module that filters and purifies water, leaving pure drinkable water. Rated for up to 3 Kerbals and stretches drinking water reserves by a factor of about 10.
	
	@mass = 0.48
	
	@MODULE[TacGenericConverter]
	{
		@conversionRate = 3.06
	}
	
	@RESOURCE[WasteWater]
	{
		amount = 0
		maxAmount = 2
	}
}

//TACLS Water Purifier, Large
@PART[TacWaterPurifierLarge]:FOR[SETIrebalance]
{
	@cost = 5400
	
	@description = A life support recycling module that filters and purifies water, leaving pure drinkable water. Packaged in a larger structure for easier use with massive rockets and space stations, with the added advantage of a faster conversion rate. Rated for up to 9 Kerbals and stretches drinking water reserves by a factor of about 10.
	
	@mass = 1.44
}


//------\\
//---Elektron Water Splitter---\\
//------\\

//TACLS Water Splitter
@PART[TacWaterSplitter]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@cost = 2100
	
	@title = TACLS Water Splitter (Elektron)
	@description = The Elektron Water Splitter uses electrolysis to convert 10L of water into about 6304 oxygen and 12360 hydrogen. It can support up to 3 kerbals, using about 29.4 mL water and 430 EC per hour to produce about 18.51 oxygen and 36.28 hydrogen.
	
	@mass = 0.48
	
	!MODULE[TacGenericConverter] {}
	MODULE
	{
		name = TacGenericConverter
		converterName = Water Splitter

		// A scaling factor by which the resource amounts are multiplied
		conversionRate = 3.03

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources = Water, 0.000002718098958, ElectricCharge, 0.039783051310155

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		outputResources = Oxygen, 0.001713537562385, false, Hydrogen, 0.003359410404565, true
	}
	
	%RESOURCE[Water]
	{
		amount = 0
		maxAmount = 3
	}
}

//TACLS Water Splitter, Large
+PART[TacWaterSplitter]:NEEDS[TacLifeSupport]:FOR[SETIrebalance]
{
	@name = TacWaterSplitterLarge
	
	@rescaleFactor = 2

	@node_stack_top = 0.0, 0.125, 0.0, 0.0, 1.0, 0.0, 2
	@node_stack_bottom = 0.0, -0.125, 0.0, 0.0, -1.0, 0.0, 2

	@cost = 6300
	
	@title = TACLS Water Splitter, Large
	@description = The Elektron Water Splitter uses electrolysis to convert 10L of water into about 6304 oxygen and 12360 hydrogen. It can support up to 9 kerbals, using about 88.07 mL water and 1289 EC per hour to produce about 55.52 oxygen and 108.84 hydrogen.
	
	@mass = 1.44
	
	!MODULE[TacGenericConverter] {}
	MODULE
	{
		name = TacGenericConverter
		converterName = Water Splitter

		// A scaling factor by which the resource amounts are multiplied
		conversionRate = 9.09

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources = Water, 0.000002718098958, ElectricCharge, 0.039783051310155

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		outputResources = Oxygen, 0.001713537562385, false, Hydrogen, 0.003359410404565, true
	}
	
	%RESOURCE[Water]
	{
		amount = 0
		maxAmount = 3
	}
}