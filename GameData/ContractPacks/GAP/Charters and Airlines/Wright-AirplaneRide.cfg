//Wright-AirplaneRide - Wright Aeronautical: Give an airplane Ride - Passengers: 1-2

CONTRACT_TYPE
{

	sortKey = f1

//REQUIREMENTS FOR CONTRACT TO APPEAR

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		
		contractType = Wright-FirstFlight
		minCount = 1

	}
	

//DATA NODES TO PROCESS FOR CONTRACT USE

//Contract Specific VesselParameterGroup Definition Key (to prevent conflict with other active contracts)
	DATA
	{
		type = string
		
		craft = GAPcraftWrightAirplaneRide
		
	}
	
//Passenger Data
	DATA
	{
		type = List<Kerbal>
		
		kerbals = [ NewKerbal(), NewKerbal() ].Random(@numPassengers)
		
		hidden = true
		
	}

	DATA
	{
		type = int		
		numPassengers = Random(1,2)
	
	}
	
	DATA
	{
		type = int
		plural = @numPassengers > 1 ? 1 : 0
		
	}

	DATA
	{
		type = List<String>
		pluralSeats = [ "seat" , "seats" ]
		
	}
	
	DATA
	{
		type = List<String>
		pluralPassengers = [ "passenger" , "passengers" ]
		
	}
	
	
//CONTRACT DESCRIPTION

	name = Wright-AirplaneRide
	title = Give an airplane ride - Passengers: @/numPassengers
	genericTitle = Give an airplane ride - (1-2 Passengers)
	group = Wright Aeronautical
	agent = Wright Aeronautical

	description = Your famous airplane flight has spurred a major interest in airplane rides. There is already a line of KSC staff, tourists, and other dignitaries at the Spaceplane Hangar Air Terminal who want to pay for the privilege to take a ride up in the air. 

	synopsis = Get paid and earn experience doing what you love! Load up a tourist or two, fly them around, and land safely.
	
	notes = Remember, tourists are not trained crews, so please keep the flight under 5 Gs to prevent them from passing out and demanding a refund.

	completedMessage = Airplane ride completed!

//Contract Limits
   	maxCompletions = 0
   	maxSimultaneous = 1
//	weight = 5.0

	autoAccept = false
	declinable = true
	cancellable = true

	minExpiry = 7.0
	maxExpiry = 7.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
   	targetBody = Kerbin

//Contract Rewards
  	advanceFunds = 0.0
  	rewardFunds = @/numPassengers * 2000.0
  	rewardReputation = 1.0
 	rewardScience = 0.0

//Contract Penalties
  	failureFunds = @/numPassengers * 2000.0
 	failureReputation = 5.0
	

//BEHAVIOURS TO DO WHEN CREATING CONTRACT

	BEHAVIOUR
	{
		name = SpawnPassengers
		type = SpawnPassengers
		
		kerbal = @/kerbals
		kerbalType = Tourist
		
	}
	

//PARAMETERS FOR CONTRACT COMPLETION

//Craft definition
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Your aircraft must
		
		define = @/craft
		dissassociateVesselsOnContractCompletion = true
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = have a certified pilot
			
			trait = Pilot
			minCrew = 1
			
			disableOnStateChange = false
			hideChildren = true

		}
		
		PARAMETER
		{
			name = HasCrewCapacity
			type = HasCrewCapacity
			title = have at least @/numPassengers passenger @/pluralSeats.ElementAt(@/plural)
			
			minCapacity = @/numPassengers + 1
			
			disableOnStateChange = false
			
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			title = have wings
			
			category = Aero
			
			disableOnStateChange = false
			hideChildren = true

		}
		
	//Passenger Manifest - Load Passengers
		PARAMETER
		{
			name = All
			type = All
			title = load @/pluralPassengers.ElementAt(@/plural)
			
			PARAMETER
			{
				name = HasPassengers
				type = HasPassengers
				title = @kerbal.First()
		
				ITERATOR
				{
					type = Kerbal
					kerbal = @/kerbals
					
				}
				
				hideChildren = true
				
			}

		}
		
		disableOnStateChange = false

	}

//Contract Goals
	PARAMETER
	{
		name = All
		type = All
		title = take your passengers flying
	
		PARAMETER
		{
			name = ReachState
			type = ReachState
			title = in the air
			
			situation = FLYING
			
			completeInSequence = true
			hideChildren = true
		
		}
		
		PARAMETER
		{
			name = Duration
			type = Duration
			
			duration = 2m
			
			preWaitText = for:
			waitingText = for:
			completionText = You can land now!

			completeInSequence = true
			
		}
		
		completeInSequence = true
		disableOnStateChange = true
		
	}
	

//Recovery Parameter - Landing
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = and then land and stop anywhere
		
		vessel = @/craft

		PARAMETER
		{
			name = ReachState
			type = ReachState
			
			targetBody = Kerbin
			situation = LANDED
			maxSpeed = 0.0
			
			disableOnStateChange = false
			hideChildren = true

		}
	
		completeInSequence = true
		disableOnStateChange = false
		hideChildren = true
	
	}

//Recovery Parameter - Craft & Kerbal Safety Check
	PARAMETER
	{
		name = All
		type = All
		title = safely
		
		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft
			
			vessel = @/craft

		}
		
		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone
			
			vessel = @/craft

		}

//
// Bug #198 (KSP 1.1.3 has EVA kerbals experiencing 15+ Gs on exit)
//		
//		PARAMETER
//		{
//			name = VesselParameterGroup
//			type = VesselParameterGroup
//			title = or exceeding 5 Gs at any time during the flight
//			
//			vessel = @/craft
//			
//			PARAMETER
//			{
//				name = ReachState
//				type = ReachState
//				
//				maxAcceleration = 5.0
//				failWhenUnmet = true
//				
//				disableOnStateChange = false
//				hideChildren = true
//				hidden = true
//			
//			}
//			
//			disableOnStateChange = false
//			hideChildren = true
//		
//		}
		
		completeInSequence = true
		disableOnStateChange = true
		
	}
	
//Recovery Parameter - Recover Kerbals
	PARAMETER
	{
		name = All
		type = All
		title = and recover
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbals
				
			}
			
			hideChildren = true
			
		}
		
	}
	
}