// Contract for researching science that already has some work done on it.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_Scraps
    group = FieldResearch

    sortKey = 04
    genericTitle = Perform repeated experiments
    genericDescription = Repeat the same experiment again and again!

    title = Perform another @scienceSubject
    description = We've got some good @scienceSubject.Experiment().Name().ToLower() data @scienceSubject.SituationString(), but Wernher believes that we can learn more.  Re-run the experiment and get the data back home.
    synopsis = Collect science about @scienceSubject.
    completedMessage = Great, let's hope that completes our knowledge of the topic.

    // Up to two
    maxSimultaneous = 2

    // Stop offering Kerbin contracts once the player orbits the sun
    prestige = OrbitedBodies().Contains(Sun) ? [ Significant, Exceptional ] : [ Trivial, Significant, Exceptional ]

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = @scienceSubject.CelestialBody()

    // Contract rewards
    rewardFunds = Random(12000.0, 14000.0)

    DATA
    {
        type = List<CelestialBody>
        hidden = true

        validBodies = Prestige() == Trivial ? [ HomeWorld() ] : Prestige() == Significant ? @FieldResearch:l2Bodies : @FieldResearch:l3Bodies
    }

    DATA
    {
        type = List<ScienceSubject>
        hidden = true

        possibleSubjectsTemp1 = AllScienceSubjectsByBody(@validBodies)
        possibleSubjectsTemp2 = @possibleSubjectsTemp1.Where(s => s.CollectedScience() > s.RemainingScience())
        possibleSubjectsTemp3 = @possibleSubjectsTemp2.Where(s => s.NextScienceReportValue() > 1.0)
        possibleSubjects = @possibleSubjectsTemp3.Where(s => !s.Biome().IsKSC())
    }

    DATA
    {
        type = ScienceSubject
        uniquenessCheck = CONTRACT_ACTIVE

        scienceSubject = @possibleSubjects.SelectUnique()

        title = Must have a subject with experimental data still to be collected
    }

    PARAMETER
    {
        name = CollectScience
        type = CollectScience

        biome = @/scienceSubject.Biome()
        situation = @/scienceSubject.Situation()
        experiment = @/scienceSubject.Experiment()
        recoveryMethod = Ideal
    }

    REQUIREMENT
    {
        type = FirstLaunch
    }
}
