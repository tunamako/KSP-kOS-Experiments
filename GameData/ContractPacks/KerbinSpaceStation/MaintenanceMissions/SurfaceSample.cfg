CONTRACT_TYPE
{
	// Unique name of the contract type (required)
	name = SurfaceSample
	// Contract text details
	title = Return a Surface Sample from @/biome1 to @/targetVessel1
	genericTitle = Return a surface sample to a space station
	description = Our research department wants to know what the effects of space will be on something besides a Kerbal.
	group = BasesandStations
	synopsis = Analyze a Surface Sample from @/biome1 on board @/targetVessel1
	completedMessage = We now have a better understanding of something we know nothing about!
	notes = Your Station must be capable of procesing the sample. (either using the Mobile Processing Lab, or Station Science Spectrometron)
	minExpiry = 1
	maxExpiry = 7
	cancellable = true
	declinable = true
	maxSimultaneous = 1
	rewardScience = 0
	rewardReputation = Random(1.0, 100.0)
	rewardFunds = Random(40000.0, 60000.0)
	failureReputation = Random(1.0, 100.0)
	failureFunds = 10000.0
	advanceFunds = 10000.0
	targetBody = @/targetBody1

	//find me a Station
	DATA
	{
		type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()
		title = Must have a station with crew.
	}
	//Find out where the Vessel is (needed to make sure that rewards scale correctly)
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @targetVessel1.CelestialBody()
		hidden = true
	}

	//logic to try and make it not selected a drained biome.
	DATA
	{
		type = Biome
		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
		biome1 = @targetBody1.Biomes().Where(b => b.RemainingScience() >20).SelectUnique()
		title = Celestial Body must have a biome with more than 20 science remaining.
	}

	//See if the player has returned a surface sample.
	DATA
	{
		type = ScienceSubject
		requiredValue = true
		uniquenessCheck = GROUP_ALL
		experiment1 = AllScienceSubjectsByBiome([@biome1]).Where(s => s.Experiment() == surfaceSample && s.CollectedScience() <1).First()
		title = Must not have returned a Surface Sample from that Biome.
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		vessel = @/targetVessel1
		title = Collect @/experiment1 and return it to @/targetVessel1.

		PARAMETER
		{
			name = CollectScience
			type = CollectScience
			subject = @/experiment1
		}

		PARAMETER
		{
			name = Labs
			type = Any	
			hideChildren = true
			title = Return it to @/targetVessel1

			PARAMETER
			{
				name = StockLab
				type = PartValidation
				hideChildren = true
				partModule = ModuleScienceLab
			}

			PARAMETER:NEEDS[StationScience]
			{
				name = StationScience
				type = PartValidation
				hideChildren = true
				partModule = SampleAnalyzer
			}
		}
	}


	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SurfaceSample	
		minCount = 0
		cooldownDuration = 10d
	}

	REQUIREMENT:NEEDS[StationScience]
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked
		partModule = SampleAnalyzer
	}

	REQUIREMENT
	{
		name = HomeWorldCheck
		type = Expression
		expression = (!@/targetBody1.IsHomeWorld())
		title = Station should not be deployed around the homeworld
	}

	REQUIREMENT
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked
		partModule = ModuleScienceLab
	}
	
	REQUIREMENT
{
	name = RandomRoll
	type = Expression
	expression = @BasesandStations:randomRoll > 5
	title = The RNG must like you.
}
}