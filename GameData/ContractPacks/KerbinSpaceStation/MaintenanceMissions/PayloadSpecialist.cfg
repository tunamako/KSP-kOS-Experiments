CONTRACT_TYPE
{
    name = PayloadSpecialist
    title = Take a Payload Specialist to @/targetVessel1
	genericTitle = Send a payload specialist to a station.
    group = BasesandStations
	description = The @/brokenPart on @/targetVessel1 is malfunctioning. We need you to take the designer of the system to fix it.
	genericDescription = A part is broken on a space station, send the designer to fix it.
    synopsis = Take the payload specialist to @/targetVessel1
    completedMessage = Hooray! The crew of @/targetVessel1 will no longer have to live without... whatever @/brokenPart provides.
    minExpiry = 1
    maxExpiry = 7
    cancellable = true
    declinable = true
    rewardScience = 0.0
    rewardReputation = 1.0
    rewardFunds = Random(40000.0, 60000)
    failureReputation = 1.0
    failureFunds = 10000.0
    advanceFunds = 10000.0
	targetBody = @/targetBody1

	    DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).Random()
		title = Stations should have crews.
    }
	
	DATA
	{
	type = CelestialBody
	targetBody1 = @/targetVessel1.CelestialBody()
	hidden = true
	}
	
	DATA
	{
    type = List<string>
    brokenList = [ "Solar Panel", "Batteries", "Life Support", "Science Module", "Airlock" ]
	hidden = true
	}
	
	DATA
	{
	type = string
	brokenPart = @/brokenList.Random()
	hidden = true
	}
	
	BEHAVIOUR
{
    name = SpawnPassengers
    type = SpawnPassengers
	count = 1
	kerbalType = Unowned
	removePassengers = true
}



PARAMETER
{
name = StationCheck
type = VesselParameterGroup
vessel = @/targetVessel1
title = Take the Payload Specialist to @/targetVessel1
hideChildren = true
PARAMETER
{
    name = HasPassengers
    type = HasPassengers
	index = 0
}
}

PARAMETER
{
    name = Duration
    type = Duration
	duration = 7d
	preWaitText = The @/brokenPart is malfunctioning!
	waitingText = Fixing the @/brokenPart
	completionText = The @/brokenPart has been repaired!
	startCriteria = PARAMETER_COMPLETION
	parameter = StationCheck
}
	

PARAMETER
{
    name = RecoverKerbal
    type = RecoverKerbal
    completeInSequence = true
}

REQUIREMENT
{
	name = Expression
	type = Expression
	expression = @BasesandStations:randomRoll <3
	title = The RNG must like you
}


