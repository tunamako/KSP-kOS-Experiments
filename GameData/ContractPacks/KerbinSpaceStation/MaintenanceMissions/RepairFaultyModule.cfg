CONTRACT_TYPE
{
    name = RepairFaultyModule
    title = Repair a faulty Power Module on @/targetVessel1
	genericTitle = Repair a faulty Power Module.
    description = Telemetry indicates that the power module on @/targetVessel1 is malfunctioning, send an engineer to repair it.
	genericDescription = Telemetry indicates that a power module  is malfunctioning, send an engineer to repair it.
    synopsis = Send an Engineer on EVA to repair the faulty power module.
    completedMessage = Telemetry seems to be all ok. The faulty module is repaired!
    minExpiry = 1
    maxExpiry = 7
	group = BasesandStations
    cancellable = true
    declinable = true
    rewardScience = 0
    rewardReputation = Random(1.0, 20.0)
    rewardFunds = Random(40000, 60000.0)
    failureReputation = Random(1.0, 10.0)
    failureFunds = Random(1.0, 10000.0)
    advanceFunds = Random(1.0, 10000.0)
	targetBody = @targetBody1
	
	    DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()
		title = Must have a space station with crew in orbit.
    }
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody1 = @/targetVessel1.CelestialBody()
	hidden = true
	}

PARAMETER
{
    name = Sequence
    type = Sequence
	hiddenParameter = Engineer
PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	
	vessel = @/targetVessel1

PARAMETER
{
    name = HasCrew
    type = HasCrew
    trait = Engineer
    title = Kerbal must be an engineer and on board @/targetVessel1
}
}
PARAMETER
{
name = Engineer
type = All

PARAMETER
{
    name = VesselIsType
    type = VesselIsType
    vesselType = EVA
}
PARAMETER
{
    name = HasCrew
    type = HasCrew
    trait = Engineer 
}
}
}
PARAMETER
{
    name = Duration
    type = Duration
    duration = 2m
	preWaitText = Waiting for an Engineer.
	waitingText = Repair in progress
    completionText = Module repaired! Get back to the station.
	completeInSequence = true
}

REQUIREMENT
{
    name = Tier3
    type = CompleteContract
    contractType = RepairFaultyModule
		minCount = 0
	cooldownDuration = 10d
	title = Must not have completed contract in last 10 days.
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	REQUIREMENT
{
	name = RandomRoll
	type = Expression
	expression = @BasesandStations:randomRoll <3
	title = The RNG must like you
}
}