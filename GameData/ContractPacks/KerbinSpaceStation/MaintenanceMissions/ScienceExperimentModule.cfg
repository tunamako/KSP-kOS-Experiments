   CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = ScienceExperimentModule
        // Contract text details
        title = Perform a science experiment on @/targetVessel1
		genericTitle = Perform science experiments on a space station.
        description = Our research department wants to know what the effects of space will be on something besides a Kerbal.
        synopsis = Do an experiment on @/targetVessel1 then return the experiment to Kerbin.
        completedMessage = We now have a better understanding of something we know nothing about!
		minExpiry = 1
        maxExpiry = 30
        cancellable = true
        declinable = true
		group = BasesandStations
		maxSimultaneous = 1
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(40000.0, 60000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = 10000.0
        advanceFunds = 10000.0
		targetBody = @/targetBody1

	    DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).Random()
		title = Must have a station with crew.
    }
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody1 = @/targetVessel1.CelestialBody()
	hidden = true
	}

PARAMETER
PARAMETER
{
    name = Sequence
    type = Sequence	
PARAMETER
{
    name = Docking
    type = Docking
	vessel = @/targetVessel1
	title = Dock with @/targetVessel1
	}

	PARAMETER
{
    name = CollectScience
    type = CollectScience
	situation = InSpaceLow
	recoveryMethod = Recover
	hideChildren = true
	title = Perform an experiment on @/targetVessel1 and return it to Kerbin
}
}
REQUIREMENT
{
    name = CompleteContract
    type = CompleteContract
	contractType = ScienceExperimentModule
	minCount = 0
	cooldownDuration = 10d
	title = Must not have completed this contract in the last 10 days.
	
}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	title = The station should be in orbit
	expression = (@/targetVessel1.IsOrbiting())
	}
	
	REQUIREMENT
{
	name = RandomRoll
	type = Expression
	expression = @BasesandStations:randomRoll >5
	title = The RNG must like you.
}
}