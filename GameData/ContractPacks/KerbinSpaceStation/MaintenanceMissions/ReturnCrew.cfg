CONTRACT_TYPE
{
    name = ReturnCrew
    title = Take the crew of @/targetVessel1 to @/targetVessel2
	genericTitle = Return an evacuated crew to a Space Station.
	description = The emergency seems to be over and conditions down here don't look fantastic. You'd better get them off the surface ASAP.
    group = BasesandStations
    synopsis = Take the crew of @/targetVessel1 to @/targetVessel2 for debriefing.
	completedMessage = Thanks for the lift!
    minExpiry = 1
    maxExpiry = 7
    cancellable = true
    declinable = true
    rewardScience = 0
	maxSimultaneous = 1
    rewardReputation = 1.0
    rewardFunds = Random(40000, 60000.0)
    failureFunds = Random(1,10000.0)
    advanceFunds = Random(1,10000.0)
	targetBody = @/targetBody1
//find a ServiceModule
	DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = [ServiceModule].Where(a => a.IsLanded() || a.IsSplashed()).Random()
		title = Escape Pod used to evacuate station must exist.
    }
	//Find me a station!
    DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel2 = AllVessels().Where(v => v.VesselType() == Station).Where(v => v.CelestialBody() == @targetBody1 && v.EmptyCrewSpace() >= @targetVessel1.CrewCount()).Random()
		title = Must have a station in orbit of the Celestial Body the escape pod is landed on. This station must have enough crew capacity to receive the crew.
    }
	
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @targetVessel1.CelestialBody()
		hidden = true
	}
	
PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	vessel = @/targetVessel1
    PARAMETER
	{
		name = Docking
		type = Docking
		vessel = @/targetVessel2
		title = Dock @/targetVessel1 with @/targetVessel2
		disableOnStateChange = true
	}
}
}