CONTRACT_TYPE
{
	name = BasePopulation
    title = Base Population 
    group = BasesandStations
	description = Our engineers are happy to complete @/targetVessel1 but thinks that some kerbals down there will be good.
	genericDescription = Our engineers are happy to complete the base, but think that some kerbals down there will be good.
    synopsis = We want you to bring some kerbals down to @/targetVessel1 .   
    completedMessage = You have colonized @/targetBody1 .
    minExpiry = 0.0
    maxExpiry = 7.0
    cancellable = true
    declinable = true 
    autoAccept = false
    prestige = Significant   
    targetBody = @/targetBody1
	maxSimultaneous = 1   
    rewardScience = 0.0
    rewardReputation = 10.0
    rewardFunds = Random(40000, 70000)
    failureReputation = 10.00
    failureFunds = 100000.0
    advanceFunds = 1000.0 
	DATA
    {
        type = Vessel
        requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Base && v.IsLanded() && v.CrewCount()<1 && v.EmptyCrewSpace()>0).SelectUnique()
		title = Must have an uncrewed base, with seats to fill.
    }	
	DATA
	{
        type = Location
		vesselLocation = @targetVessel1.Location()
		hidden = true
    }
    DATA
	{
        type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
    }
	
	    DATA
	{
        type = double
		requiredValue = true
		CrewSpace = @/targetVessel1.EmptyCrewSpace()
    }

PARAMETER
{
	name = VesselParameterGroup
    type = VesselParameterGroup
	vessel = @/targetVessel1
	
	PARAMETER
    {
        name = HasCrew
		type = HasCrew		
		disableOnStateChange = true
		minCrew = Random(1 , @/CrewSpace)
    }
}
REQUIREMENT
{
name = Expression
type = Expression
expression = !@/targetBody1.IsHomeWorld()
title = Bases should not be built on the homeworld
}

}
