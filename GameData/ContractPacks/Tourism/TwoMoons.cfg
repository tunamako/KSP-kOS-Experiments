// Contract for sending tourists to both moons.
//   Author: nightingale

CONTRACT_TYPE
{
    name = Tourism_TwoMoons
    group = Tourism

    sortKey = 03.01.TwoMoons
    genericTitle = Bring tourists on a multi-moon flyby
    genericDescription = Bring some tourists with you to several moons.

    title = Multi-moon flyby with @Tourism:touristCount.Print() @Tourism:tourists
    description = These @Tourism:tourists have booked the delux @targetBody package.  Do a near flyby of @targetBody.Children().First() and @targetBody.Children().Last().
    synopsis = Fly by @targetBody's moons with @Tourism:touristCount.Print() @Tourism:tourists.
    completedMessage = The @Tourism:tourists had a great time!

    // Level 3 prestige
    prestige = Exceptional

    targetBody = HomeWorld().Parent().IsPlanet() ? HomeWorld().Parent() : HomeWorld()

    agent = Kerbal Space Tourism

    // Only one of these shows up at a time
    maxSimultaneous = 1

    // Contract rewards
    rewardFunds = 20000.0 + 85000.0 * @Tourism:touristCount + Random(0.0, 10000.0)
    rewardReputation = 4.0
    failureReputation = 20.0

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Visit @/targetBody's moons

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            disableOnStateChange = true

            maxAltitude = @targetBody.First().Radius() / 2.0

            ITERATOR
            {
                type = CelestialBody
                targetBody = @/targetBody.Children()
            }
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @Tourism:touristCount
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @Tourism:touristCount
            TouristMoonsCount = TouristMoonsCount + @Tourism:touristCount
        }
    }

    REQUIREMENT
    {
        name = CompleteContract
        type = CompleteContract

        contractType = Tourism_Moons
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = @/targetBody.Children().Count() > 1

        title = "HomeWorld() must have at least two moons"
    }

    REQUIREMENT
    {
        name = AnyStarter
        type = Any

        hideChildren = true
        title = Must have opened up space tourism

        REQUIREMENT
        {
            name = CompleteContract
            type = CompleteContract

            contractType = TourismContract
        }

        REQUIREMENT
        {
            name = CompleteContract
            type = CompleteContract

            contractType = Tourism_FirstTourist
        }
    }
}
