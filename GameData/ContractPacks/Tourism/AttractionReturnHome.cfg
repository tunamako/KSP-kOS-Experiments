// Contract for sending tourists to low orbit.
//   Author: nightingale

CONTRACT_TYPE
{
    name = Tourism_AttractionReturn
    group = Tourism

    sortKey = 10.01.AttractionReturn
    genericTitle = Bring tourists home from a hotel or casino
    genericDescription = After our hotels and casinos are filled with tourists, we can charge to bring them back home!

    title = Bring @touristCount.Print() tourists home from @targetVessel
    description = Some @Tourism:tourists are ending their stay at @targetVessel and need a ride home.
    synopsis = Bring @touristCount.Print() Kerbals home from @targetVessel.
    completedMessage = The @Tourism:tourists had a great time!

    // Level 1 prestige
    prestige = Trivial

    targetBody = HomeWorld()

    agent = Kerbal Space Tourism

    // Contract rewards
    rewardFunds = @attractionModifier * (15000.0 * @touristCount + Random(0.0, 10000.0))
    rewardReputation = 1.0
    failureReputation = 20.0

    DATA
    {
        type = List<VesselIdentifier>

        requiredValue = false

        validHotels = $Tourism_Hotels.Add(Space Hotel).Where(vi => Vessel(vi).IsOrbiting() && Vessel(vi).Crew().Where(k => k.Type() == Tourist).Count() >= 10)
        validCasinos = $Tourism_Casinos.Add(Space Casino).Where(vi => Vessel(vi).IsOrbiting() && Vessel(vi).Crew().Where(k => k.Type() == Tourist).Count() >= 10)
    }

    DATA
    {
        type = int

        selectionIndex = Random(0, @validHotels.Count() + @validCasinos.Count() - 1)
        casinoIndex = @selectionIndex - @validHotels.Count()

        touristCount = @targetKerbals.Count()
    }

    DATA
    {
        type = bool
        
        isHotel = @selectionIndex < @validHotels.Count()
    }

    DATA
    {
        type = double
        
        attractionModifier = @isHotel ? 1.0 : 5.0
    }

    DATA
    {
        type = string

        hidden = true

        buildingName = @isHotel ? "hotel" : "casino"
    }

    DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true // Hidden because the expression requirement conveys the same information

        // Get the proper target vessel
        targetVessel = @isHotel ? @validHotels.ElementAt(@selectionIndex) : @validCasinos.ElementAt(@casinoIndex)
    }

    DATA
    {
        type = List<Kerbal>

        hidden = true

        // Get me some Kerbals to send home!
        targetKerbals = @targetVessel.Crew().Where(k => k.Type() == Tourist)
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        kerbal = @/targetKerbals
    }

    BEHAVIOUR
    {
        type = RemoveKerbal

        kerbal = @/targetKerbals
    }
}
