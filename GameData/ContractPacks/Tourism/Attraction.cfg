// Contract for sending tourists to low orbit.
//   Author: nightingale

CONTRACT_TYPE
{
    name = Tourism_Attraction
    group = Tourism

    sortKey = 10.00.Attraction
    genericTitle = Bring tourists to a hotel or casino
    genericDescription = Once we've built an attraction, we can bring tourists there.

    title = Bring @/touristCount.Print() tourists to our @buildingName, @targetVessel
    description = Tourists are flocking to see our @buildingName!  We've got another load of passengers that need a shuttle up to @targetVessel.
    synopsis = Bring @/touristCount.Print() tourists to @targetVessel
    completedMessage = The @Tourism:tourists are on board!

    // Level 2 prestige
    prestige = Significant

    targetBody = HomeWorld()

    agent = Kerbal Space Tourism

    // Contract rewards
    rewardFunds = @attractionModifier * (30000.0 * @touristCount + Random(0.0, 10000.0))
    rewardReputation = 1.0
    failureReputation = 20.0

    DATA
    {
        type = List<VesselIdentifier>

        requiredValue = false

        validHotels = $Tourism_Hotels.Add(Space Hotel).Where(vi => Vessel(vi).IsOrbiting() && Vessel(vi).EmptyCrewSpace() >= 10)
        validCasinos = $Tourism_Casinos.Add(Space Casino).Where(vi => Vessel(vi).IsOrbiting() && Vessel(vi).EmptyCrewSpace() >= 10)
    }

    DATA
    {
        type = int

        selectionIndex = Random(0, @validHotels.Count() + @validCasinos.Count() - 1)
        casinoIndex = @selectionIndex - @validHotels.Count()

        touristCount = Random(10, Min(40, Max(@targetVessel.EmptyCrewSpace(), 1)))
    }

    DATA
    {
        type = bool
        
        isHotel = @selectionIndex < @validHotels.Count()
    }

    DATA
    {
        type = double
        
        attractionModifier = @isHotel ? 1.0 : 5.0
    }

    DATA
    {
        type = string

        hidden = true

        buildingName = @isHotel ? "hotel" : "casino"
    }

    DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true // Hidden because the expression requirement conveys the same information

        // Get the proper target vessel
        targetVessel = @isHotel ? @validHotels.ElementAt(@selectionIndex) : @validCasinos.ElementAt(@casinoIndex)
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        vessel = @/targetVessel

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @/touristCount

        removePassengers = false
    }

    BEHAVIOUR
    {
        name = Expression
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            TouristCount = TouristCount + @Tourism:touristCount
            TouristAttractionCount = TouristAttractionCount + @Tourism:touristCount
        }
    }

    REQUIREMENT
    {
        type = Expression

        expression = @/validHotels.Count() > 0 || @/validCasinos.Count() > 0

        title = Must have a casino or hotel with at least ten empty crew spaces
    }
}
